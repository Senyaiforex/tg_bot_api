"""empty message

Revision ID: b307e5febc12
Revises: 
Create Date: 2024-09-28 01:22:37.212090

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlalchemy_utils

posts_types = [
            ('free', 'Бесплатно'),
            ('coins', 'За монеты'),
            ('token', 'За токены'),
            ('money', 'За рубли'),
            ('stars', 'За звёзды')
    ]

cat_types = [
            ('subscribe', 'Подписаться на канал'),
            ('games', 'Игры'),
            ('watch', 'Просмотр видео'),
            ('like', 'Поставить лайк или добавить в избранное'),
            ('comment', 'Оставить комментарий'),
            ('save', 'Добавить в избранное'),
            ('bonus', 'Бонусы')
    ]
# revision identifiers, used by Alembic.
revision: str = "b307e5febc12"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "bank",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("coins", sa.Integer(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_bank_coins"), "bank", ["coins"], unique=False)
    op.create_table(
        "categories_tasks",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "name",
            sqlalchemy_utils.types.choice.ChoiceType(cat_types),
            nullable=True,
            comment="Название категории",
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_categories_tasks_id"),
        "categories_tasks",
        ["id"],
        unique=False,
    )
    op.create_table(
        "liquid",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("free_posts", sa.Integer(), nullable=True),
        sa.Column("coins_posts", sa.Integer(), nullable=True),
        sa.Column("money_posts", sa.Integer(), nullable=True),
        sa.Column("token_posts", sa.Integer(), nullable=True),
        sa.Column("stars_posts", sa.Integer(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_liquid_id"), "liquid", ["id"], unique=False)
    op.create_table(
        "order",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("amount", sa.Integer(), nullable=True),
        sa.Column("user_telegram", sa.Integer(), nullable=False),
        sa.Column("user_name", sa.String(), nullable=False),
        sa.Column("post_id", sa.Integer(), nullable=False),
        sa.Column("paid", sa.Boolean(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_order_id"), "order", ["id"], unique=False)
    op.create_table(
        "pulls",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "farming", sa.Integer(), nullable=True, comment="Пулл для фарминга"
        ),
        sa.Column(
            "task", sa.Integer(), nullable=True, comment="Пулл для заданий"
        ),
        sa.Column(
            "friends", sa.Integer(), nullable=True, comment="Пулл для друзей"
        ),
        sa.Column(
            "plan",
            sa.Integer(),
            nullable=True,
            comment="Пулл для краудсорсинга",
        ),
        sa.Column(
            "coins", sa.Integer(), nullable=True, comment="Пулл для монет"
        ),
        sa.Column(
            "current_farming",
            sa.Integer(),
            nullable=True,
            comment="Текущий фарминг",
        ),
        sa.Column(
            "current_task",
            sa.Integer(),
            nullable=True,
            comment="Текущее количество пулла по заданиям",
        ),
        sa.Column(
            "current_friends",
            sa.Integer(),
            nullable=True,
            comment="Текущее количество пулла по друзьям",
        ),
        sa.Column(
            "current_coins",
            sa.Integer(),
            nullable=True,
            comment="Текущее количество пулла по монетам",
        ),
        sa.Column(
            "current_plan",
            sa.Integer(),
            nullable=True,
            comment="Текущее количество пулла по краудсорсингу",
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_pulls_id"), "pulls", ["id"], unique=False)
    op.create_table(
        "ranks",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "rank",
            sa.Enum(
                "stone",
                "copper",
                "silver",
                "gold",
                "platinum",
                "diamond",
                "sapphire",
                "ruby",
                "amethyst",
                "morganite",
                name="rankenum",
            ),
            nullable=True,
            comment="Ранг пользователя",
        ),
        sa.Column(
            "level", sa.Integer(), nullable=False, comment="Уровень в ранге"
        ),
        sa.Column(
            "required_coins",
            sa.Integer(),
            nullable=False,
            comment="Требуемое количество монет",
        ),
        sa.Column(
            "required_friends",
            sa.Integer(),
            nullable=False,
            comment="Требуемое количество друзей",
        ),
        sa.Column(
            "required_tasks",
            sa.Integer(),
            nullable=False,
            comment="Требуемое количество выполненных задач",
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_ranks_id"), "ranks", ["id"], unique=False)
    op.create_table(
        "tasks",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("category_id", sa.Integer(), nullable=True),
        sa.Column(
            "description", sa.String(), nullable=True, comment="Описание"
        ),
        sa.Column(
            "url", sa.String(), nullable=True, comment="Ссылка на задачу"
        ),
        sa.Column(
            "date_limit",
            sa.Date(),
            nullable=True,
            comment="Дата действия задания",
        ),
        sa.ForeignKeyConstraint(
            ["category_id"],
            ["categories_tasks.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_tasks_id"), "tasks", ["id"], unique=False)
    op.create_index(op.f("ix_tasks_url"), "tasks", ["url"], unique=False)
    op.create_table(
        "users",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("id_telegram", sa.Integer(), nullable=True),
        sa.Column("user_name", sa.String(), nullable=True),
        sa.Column("count_coins", sa.Integer(), nullable=True),
        sa.Column("count_pharmd", sa.Integer(), nullable=True),
        sa.Column("total_coins", sa.Integer(), nullable=True),
        sa.Column("count_invited_friends", sa.Integer(), nullable=True),
        sa.Column("purchase_count", sa.Integer(), nullable=True),
        sa.Column("sale_count", sa.Integer(), nullable=True),
        sa.Column("registration_date", sa.Date(), nullable=True),
        sa.Column("active", sa.Boolean(), nullable=True),
        sa.Column("admin", sa.Boolean(), nullable=True),
        sa.Column("superuser", sa.Boolean(), nullable=True),
        sa.Column(
            "spinners",
            sa.Integer(),
            nullable=True,
            comment="Количество спиннеров для рулетки",
        ),
        sa.Column(
            "count_tasks",
            sa.Integer(),
            nullable=True,
            comment="Количество выполненных задач",
        ),
        sa.Column("rank_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["rank_id"],
            ["ranks.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_users_id"), "users", ["id"], unique=False)
    op.create_index(
        op.f("ix_users_id_telegram"), "users", ["id_telegram"], unique=True
    )
    op.create_index(
        op.f("ix_users_user_name"), "users", ["user_name"], unique=False
    )
    op.create_table(
        "friends",
        sa.Column("friend1_id_telegram", sa.Integer(), nullable=False),
        sa.Column("friend2_id_telegram", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["friend1_id_telegram"],
            ["users.id_telegram"],
        ),
        sa.ForeignKeyConstraint(
            ["friend2_id_telegram"],
            ["users.id_telegram"],
        ),
        sa.PrimaryKeyConstraint("friend1_id_telegram", "friend2_id_telegram"),
    )
    op.create_table(
        "history_transactions",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=True),
        sa.Column("change_amount", sa.Integer(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("transaction_date", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_history_transactions_id"),
        "history_transactions",
        ["id"],
        unique=False,
    )
    op.create_table(
        "posts",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "name", sa.String(), nullable=True, comment="Название поста"
        ),
        sa.Column(
            "method",
            sqlalchemy_utils.types.choice.ChoiceType(posts_types),
            nullable=True,
            comment="Тип публикации",
        ),
        sa.Column(
            "photo",
            sa.String(),
            nullable=True,
            comment="Путь к фотографии поста",
        ),
        sa.Column(
            "price", sa.Integer(), nullable=True, comment="Цена на товар"
        ),
        sa.Column(
            "discounted_price",
            sa.Integer(),
            nullable=True,
            comment="Цена со скидкой",
        ),
        sa.Column("discount", sa.Integer(), nullable=True, comment="Скидка"),
        sa.Column(
            "url_message",
            sa.String(),
            nullable=True,
            comment="Ссылка на сообщение с постом в группе",
        ),
        sa.Column(
            "url_message_main",
            sa.String(),
            nullable=True,
            comment="Ссылка на сообщение с постом в основной группе",
        ),
        sa.Column("active", sa.Boolean(), nullable=True),
        sa.Column(
            "marketplace", sa.String(), nullable=True, comment="Маркетплейс"
        ),
        sa.Column(
            "account_url",
            sa.String(),
            nullable=True,
            comment="Ссылка на аккаунт",
        ),
        sa.Column("user_telegram", sa.Integer(), nullable=True),
        sa.Column("channel_id", sa.String(), nullable=True),
        sa.Column("date_public", sa.Date(), nullable=True),
        sa.Column("date_expired", sa.Date(), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_telegram"],
            ["users.id_telegram"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_posts_id"), "posts", ["id"], unique=False)
    op.create_index(
        op.f("ix_posts_url_message"), "posts", ["url_message"], unique=False
    )
    op.create_table(
        "search_post",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "name",
            sa.String(),
            nullable=False,
            comment="Название товара для поиска",
        ),
        sa.Column("user_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_search_post_id"), "search_post", ["id"], unique=False
    )
    op.create_index(
        op.f("ix_search_post_name"), "search_post", ["name"], unique=False
    )
    op.create_table(
        "users_tasks",
        sa.Column("user_id", sa.BigInteger(), nullable=False),
        sa.Column("task_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["task_id"],
            ["tasks.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("user_id", "task_id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("users_tasks")
    op.drop_index(op.f("ix_search_post_name"), table_name="search_post")
    op.drop_index(op.f("ix_search_post_id"), table_name="search_post")
    op.drop_table("search_post")
    op.drop_index(op.f("ix_posts_url_message"), table_name="posts")
    op.drop_index(op.f("ix_posts_id"), table_name="posts")
    op.drop_table("posts")
    op.drop_index(
        op.f("ix_history_transactions_id"), table_name="history_transactions"
    )
    op.drop_table("history_transactions")
    op.drop_table("friends")
    op.drop_index(op.f("ix_users_user_name"), table_name="users")
    op.drop_index(op.f("ix_users_id_telegram"), table_name="users")
    op.drop_index(op.f("ix_users_id"), table_name="users")
    op.drop_table("users")
    op.drop_index(op.f("ix_tasks_url"), table_name="tasks")
    op.drop_index(op.f("ix_tasks_id"), table_name="tasks")
    op.drop_table("tasks")
    op.drop_index(op.f("ix_ranks_id"), table_name="ranks")
    op.drop_table("ranks")
    op.drop_index(op.f("ix_pulls_id"), table_name="pulls")
    op.drop_table("pulls")
    op.drop_index(op.f("ix_order_id"), table_name="order")
    op.drop_table("order")
    op.drop_index(op.f("ix_liquid_id"), table_name="liquid")
    op.drop_table("liquid")
    op.drop_index(
        op.f("ix_categories_tasks_id"), table_name="categories_tasks"
    )
    op.drop_table("categories_tasks")
    op.drop_index(op.f("ix_bank_coins"), table_name="bank")
    op.drop_table("bank")
    op.execute("DROP TYPE rankenum")
    # ### end Alembic commands ###
